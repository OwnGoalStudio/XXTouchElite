"use strict";(self.webpackChunkxxtouch_lite=self.webpackChunkxxtouch_lite||[]).push([[3909],{5574:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>c});const l=JSON.parse('{"id":"lua-manual/file","title":"File Operation Module","description":"File Operation Module - file","source":"@site/docs/lua-manual/file.md","sourceDirName":"lua-manual","slug":"/lua-manual/file","permalink":"/docs/lua-manual/file","draft":false,"unlisted":false,"editUrl":"https://github.com/OwnGoalStudio/XXTouchElite/tree/main/docs/lua-manual/file.md","tags":[],"version":"current","sidebarPosition":18,"frontMatter":{"sidebar_position":18},"sidebar":"luaManualSidebar","previous":{"title":"FTP Module","permalink":"/docs/lua-manual/ftp"},"next":{"title":"Clear Module","permalink":"/docs/lua-manual/clear"}}');var s=n(4848),r=n(8453);const t={sidebar_position:18},a="File Operation Module",d={},c=[{value:"File Operation Module - file",id:"file-operation-module---file",level:2},{value:"Check if a File or Directory Exists (<strong>file.exists</strong>)",id:"check-if-a-file-or-directory-exists-fileexists",level:3},{value:"Declaration",id:"declaration",level:4},{value:"Parameters and Return Values",id:"parameters-and-return-values",level:4},{value:"Example",id:"example",level:4},{value:"List All File Names in a Directory (<strong>file.list</strong>)",id:"list-all-file-names-in-a-directory-filelist",level:3},{value:"Declaration",id:"declaration-1",level:4},{value:"Parameters and Return Values",id:"parameters-and-return-values-1",level:4},{value:"Example",id:"example-1",level:4},{value:"Get the Size of a File (<strong>file.size</strong>)",id:"get-the-size-of-a-file-filesize",level:3},{value:"Declaration",id:"declaration-2",level:4},{value:"Parameters and Return Values",id:"parameters-and-return-values-2",level:4},{value:"Example",id:"example-2",level:4},{value:"Read Data from a File (<strong>file.reads</strong>)",id:"read-data-from-a-file-filereads",level:3},{value:"Declaration",id:"declaration-3",level:4},{value:"Parameters and Return Values",id:"parameters-and-return-values-3",level:4},{value:"Example",id:"example-3",level:4},{value:"Write Data to a File (<strong>file.writes</strong>)",id:"write-data-to-a-file-filewrites",level:3},{value:"Declaration",id:"declaration-4",level:4},{value:"Parameters and Return Values",id:"parameters-and-return-values-4",level:4},{value:"Description",id:"description",level:4},{value:"Example",id:"example-4",level:4},{value:"Append Data to the End of a File (<strong>file.appends</strong>)",id:"append-data-to-the-end-of-a-file-fileappends",level:3},{value:"Declaration",id:"declaration-5",level:4},{value:"Parameters and Return Values",id:"parameters-and-return-values-5",level:4},{value:"Description",id:"description-1",level:4},{value:"Example",id:"example-5",level:4},{value:"\ud83d\udd24 Count the Total Number of Lines in a Text File (<strong>file.line_count</strong>)",id:"-count-the-total-number-of-lines-in-a-text-file-fileline_count",level:3},{value:"Declaration",id:"declaration-6",level:4},{value:"Parameters and Return Values",id:"parameters-and-return-values-6",level:4},{value:"Example",id:"example-6",level:4},{value:"\ud83d\udd24 Get the Content of a Specific Line in a Text File (<strong>file.get_line</strong>)",id:"-get-the-content-of-a-specific-line-in-a-text-file-fileget_line",level:3},{value:"Declaration",id:"declaration-7",level:4},{value:"Parameters and Return Values",id:"parameters-and-return-values-7",level:4},{value:"Description",id:"description-2",level:4},{value:"Example",id:"example-7",level:4},{value:"\ud83d\udd24 Set the Content of a Specific Line in a Text File (<strong>file.set_line</strong>)",id:"-set-the-content-of-a-specific-line-in-a-text-file-fileset_line",level:3},{value:"Declaration",id:"declaration-8",level:4},{value:"Parameters and Return Values",id:"parameters-and-return-values-8",level:4},{value:"Description",id:"description-3",level:4},{value:"Example",id:"example-8",level:4},{value:"\ud83d\udd24 Insert Content Before a Specific Line in a Text File (<strong>file.insert_line</strong>)",id:"-insert-content-before-a-specific-line-in-a-text-file-fileinsert_line",level:3},{value:"Declaration",id:"declaration-9",level:4},{value:"Parameters and Return Values",id:"parameters-and-return-values-9",level:4},{value:"Description",id:"description-4",level:4},{value:"Example",id:"example-9",level:4},{value:"\ud83d\udd24 Remove a Specific Line from a Text File (<strong>file.remove_line</strong>)",id:"-remove-a-specific-line-from-a-text-file-fileremove_line",level:3},{value:"Declaration",id:"declaration-10",level:4},{value:"Parameters and Return Values",id:"parameters-and-return-values-10",level:4},{value:"Description",id:"description-5",level:4},{value:"Example",id:"example-10",level:4},{value:"\ud83d\udd24 Get All Lines of a Text File (<strong>file.get_lines</strong>)",id:"-get-all-lines-of-a-text-file-fileget_lines",level:3},{value:"Declaration",id:"declaration-11",level:4},{value:"Parameters and Return Values",id:"parameters-and-return-values-11",level:4},{value:"Description",id:"description-6",level:4},{value:"Example",id:"example-11",level:4},{value:"\ud83d\udd24 Overwrite a File with an Array of Strings Line by Line (<strong>file.set_lines</strong>)",id:"-overwrite-a-file-with-an-array-of-strings-line-by-line-fileset_lines",level:3},{value:"Declaration",id:"declaration-12",level:4},{value:"Parameters and Return Values",id:"parameters-and-return-values-12",level:4},{value:"Description",id:"description-7",level:4},{value:"Example",id:"example-12",level:4},{value:"\ud83d\udd24 Insert an Array of Strings Line by Line Before a Specific Line in a File (<strong>file.insert_lines</strong>)",id:"-insert-an-array-of-strings-line-by-line-before-a-specific-line-in-a-file-fileinsert_lines",level:3},{value:"Declaration",id:"declaration-13",level:4},{value:"Parameters and Return Values",id:"parameters-and-return-values-13",level:4},{value:"Description",id:"description-8",level:4},{value:"Example",id:"example-13",level:4}];function o(e){const i={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.header,{children:(0,s.jsx)(i.h1,{id:"file-operation-module",children:"File Operation Module"})}),"\n",(0,s.jsx)(i.h2,{id:"file-operation-module---file",children:"File Operation Module - file"}),"\n",(0,s.jsx)(i.p,{children:"Functions marked with \ud83d\udd24 process the read file as a UTF-8 text file."}),"\n",(0,s.jsxs)(i.h3,{id:"check-if-a-file-or-directory-exists-fileexists",children:["Check if a File or Directory Exists (",(0,s.jsx)(i.strong,{children:"file.exists"}),")"]}),"\n",(0,s.jsx)(i.h4,{id:"declaration",children:"Declaration"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-lua",children:"existence_info = file.exists(path_to_file_or_directory)\n"})}),"\n",(0,s.jsx)(i.h4,{id:"parameters-and-return-values",children:"Parameters and Return Values"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["path_to_file_or_directory ",(0,s.jsx)(i.em,{children:"string"})]}),"\n",(0,s.jsxs)(i.li,{children:["existence_info","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"false"})," or ",(0,s.jsx)(i.code,{children:'"file"'})," or ",(0,s.jsx)(i.code,{children:'"directory"'}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"false"})," Path does not exist"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:'"file"'})," Path is a file"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:'"directory"'})," Path is a directory"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.h4,{id:"example",children:"Example"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-lua",metastring:'title="file.exists"',children:'if file.exists("/var/mobile/1.zip") then\n  sys.alert("`/var/mobile/1.zip` exists")\nelse\n  sys.alert("`/var/mobile/1.zip` does not exist")\nend\n--\nif file.exists("/var/mobile/1.zip") == "file" then\n  sys.alert("`/var/mobile/1.zip` exists and is a file")\nelse\n  sys.alert("`/var/mobile/1.zip` is not a file")\nend\n--\nif file.exists("/var/mobile/123/") == "directory" then\n  sys.alert("`/var/mobile/123/` exists and is a directory")\nelse\n  sys.alert("`/var/mobile/123/` is not a directory")\nend\n'})}),"\n",(0,s.jsxs)(i.h3,{id:"list-all-file-names-in-a-directory-filelist",children:["List All File Names in a Directory (",(0,s.jsx)(i.strong,{children:"file.list"}),")"]}),"\n",(0,s.jsx)(i.h4,{id:"declaration-1",children:"Declaration"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-lua",children:"file_list = file.list(directory_path)\n"})}),"\n",(0,s.jsx)(i.h4,{id:"parameters-and-return-values-1",children:"Parameters and Return Values"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["directory_path ",(0,s.jsx)(i.em,{children:"string"})]}),"\n",(0,s.jsxs)(i.li,{children:["file_list","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.em,{children:"array of strings"}),", returns ",(0,s.jsx)(i.code,{children:"nil"})," if the directory does not exist or the specified path is a file"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.h4,{id:"example-1",children:"Example"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-lua",metastring:'title="file.list"',children:'local list = file.list("/var/mobile/")\nif list then\n  nLog("There are " .. #list .. " files or directories in `/var/mobile/`")\n  for _, name in ipairs(list) do\n    nLog(name)\n  end\n  sys.alert(print.out())\nelse\n  sys.alert("`/var/mobile/` is not a directory")\nend\n'})}),"\n",(0,s.jsxs)(i.h3,{id:"get-the-size-of-a-file-filesize",children:["Get the Size of a File (",(0,s.jsx)(i.strong,{children:"file.size"}),")"]}),"\n",(0,s.jsx)(i.h4,{id:"declaration-2",children:"Declaration"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-lua",children:"file_size = file.size(file_path)\n"})}),"\n",(0,s.jsx)(i.h4,{id:"parameters-and-return-values-2",children:"Parameters and Return Values"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["file_path ",(0,s.jsx)(i.em,{children:"string"})]}),"\n",(0,s.jsxs)(i.li,{children:["file_size","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.em,{children:"integer"}),", size in bytes, returns ",(0,s.jsx)(i.code,{children:"nil"})," if the file does not exist or the specified path is a directory"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.h4,{id:"example-2",children:"Example"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-lua",metastring:'title="file.size"',children:'local fsize = file.size("/var/mobile/1.zip")\nif fsize then\n  sys.alert("The size of `/var/mobile/1.zip` is: " .. fsize .. " bytes")\nelse\n  sys.alert("`/var/mobile/1.zip` is not a file")\nend\n'})}),"\n",(0,s.jsxs)(i.h3,{id:"read-data-from-a-file-filereads",children:["Read Data from a File (",(0,s.jsx)(i.strong,{children:"file.reads"}),")"]}),"\n",(0,s.jsx)(i.h4,{id:"declaration-3",children:"Declaration"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-lua",children:"file_content = file.reads(file_path)\n"})}),"\n",(0,s.jsx)(i.h4,{id:"parameters-and-return-values-3",children:"Parameters and Return Values"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["file_path ",(0,s.jsx)(i.em,{children:"string"})]}),"\n",(0,s.jsxs)(i.li,{children:["file_content","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.em,{children:"string"}),", the entire content of the file, returns ",(0,s.jsx)(i.code,{children:"nil"})," if the file does not exist or the specified path is a directory"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.h4,{id:"example-3",children:"Example"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-lua",metastring:'title="file.reads"',children:'local data = file.reads("/var/mobile/1.zip")\nif data then\n  sys.alert("The size of `/var/mobile/1.zip` is: " .. #data .. " bytes")\nelse\n  sys.alert("`/var/mobile/1.zip` is not a file")\nend\n'})}),"\n",(0,s.jsxs)(i.h3,{id:"write-data-to-a-file-filewrites",children:["Write Data to a File (",(0,s.jsx)(i.strong,{children:"file.writes"}),")"]}),"\n",(0,s.jsx)(i.h4,{id:"declaration-4",children:"Declaration"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-lua",children:"operation_success = file.writes(file_path, content_to_write)\n"})}),"\n",(0,s.jsx)(i.h4,{id:"parameters-and-return-values-4",children:"Parameters and Return Values"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["file_path ",(0,s.jsx)(i.em,{children:"string"})]}),"\n",(0,s.jsxs)(i.li,{children:["content_to_write ",(0,s.jsx)(i.em,{children:"string"})]}),"\n",(0,s.jsxs)(i.li,{children:["operation_success ",(0,s.jsx)(i.em,{children:"boolean"})]}),"\n"]}),"\n",(0,s.jsx)(i.h4,{id:"description",children:"Description"}),"\n",(0,s.jsxs)(i.p,{children:["Overwrites data to ",(0,s.jsx)(i.strong,{children:"file_path"}),". If the file does not exist, it will be created. If the parent directory of the specified path does not exist, it will return ",(0,s.jsx)(i.code,{children:"false"}),"."]}),"\n",(0,s.jsx)(i.h4,{id:"example-4",children:"Example"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-lua",metastring:'title="file.writes"',children:'local success = file.writes("/var/mobile/1.txt", "Serve")\nif success then\n  sys.alert("Write successful")\nelse\n  sys.alert("Write failed")\nend\n'})}),"\n",(0,s.jsxs)(i.h3,{id:"append-data-to-the-end-of-a-file-fileappends",children:["Append Data to the End of a File (",(0,s.jsx)(i.strong,{children:"file.appends"}),")"]}),"\n",(0,s.jsx)(i.h4,{id:"declaration-5",children:"Declaration"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-lua",children:"operation_success = file.appends(file_path, content_to_append)\n"})}),"\n",(0,s.jsx)(i.h4,{id:"parameters-and-return-values-5",children:"Parameters and Return Values"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["file_path ",(0,s.jsx)(i.em,{children:"string"})]}),"\n",(0,s.jsxs)(i.li,{children:["content_to_append ",(0,s.jsx)(i.em,{children:"string"})]}),"\n",(0,s.jsxs)(i.li,{children:["operation_success ",(0,s.jsx)(i.em,{children:"boolean"})]}),"\n"]}),"\n",(0,s.jsx)(i.h4,{id:"description-1",children:"Description"}),"\n",(0,s.jsxs)(i.p,{children:["Appends ",(0,s.jsx)(i.strong,{children:"content_to_append"})," to the end of the file. If the file does not exist, it will be created. If the parent directory of the specified path does not exist, it will return ",(0,s.jsx)(i.code,{children:"false"}),"."]}),"\n",(0,s.jsx)(i.h4,{id:"example-5",children:"Example"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-lua",metastring:'title="file.appends"',children:'local success = file.appends("/var/mobile/1.txt", "to serve my country")\nif success then\n  sys.alert("Write successful")\nelse\n  sys.alert("Write failed")\nend\n'})}),"\n",(0,s.jsxs)(i.h3,{id:"-count-the-total-number-of-lines-in-a-text-file-fileline_count",children:["\ud83d\udd24 Count the Total Number of Lines in a Text File (",(0,s.jsx)(i.strong,{children:"file.line_count"}),")"]}),"\n",(0,s.jsx)(i.h4,{id:"declaration-6",children:"Declaration"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-lua",children:"line_count = file.line_count(file_path)\n"})}),"\n",(0,s.jsx)(i.h4,{id:"parameters-and-return-values-6",children:"Parameters and Return Values"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["file_path ",(0,s.jsx)(i.em,{children:"string"})]}),"\n",(0,s.jsxs)(i.li,{children:["line_count","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.em,{children:"integer"}),", an empty file will return ",(0,s.jsx)(i.code,{children:"1"}),", a non-existent file will return ",(0,s.jsx)(i.code,{children:"nil"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.h4,{id:"example-6",children:"Example"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-lua",metastring:'title="file.line_count"',children:'local cnt = file.line_count("/var/mobile/1.txt")\nif cnt then\n  sys.alert("`/var/mobile/1.txt` has " .. cnt .. " lines")\nelse\n  sys.alert("`/var/mobile/1.txt` is not a file")\nend\n'})}),"\n",(0,s.jsxs)(i.h3,{id:"-get-the-content-of-a-specific-line-in-a-text-file-fileget_line",children:["\ud83d\udd24 Get the Content of a Specific Line in a Text File (",(0,s.jsx)(i.strong,{children:"file.get_line"}),")"]}),"\n",(0,s.jsx)(i.h4,{id:"declaration-7",children:"Declaration"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-lua",children:"line_content = file.get_line(file_path, line_number)\n"})}),"\n",(0,s.jsx)(i.h4,{id:"parameters-and-return-values-7",children:"Parameters and Return Values"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["file_path ",(0,s.jsx)(i.em,{children:"string"})]}),"\n",(0,s.jsxs)(i.li,{children:["line_number","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.em,{children:"integer"}),", pass a positive integer to specify the line number, ",(0,s.jsx)(i.code,{children:"0"})," is invalid, negative numbers refer to lines from the end"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["line_content","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.em,{children:"string"}),", returns ",(0,s.jsx)(i.code,{children:"nil"})," if the operation fails"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.h4,{id:"description-2",children:"Description"}),"\n",(0,s.jsxs)(i.p,{children:["Line numbers start from ",(0,s.jsx)(i.code,{children:"1"}),". If the line number is out of range or the file does not exist, it returns ",(0,s.jsx)(i.code,{children:"nil"}),"."]}),"\n",(0,s.jsx)(i.h4,{id:"example-7",children:"Example"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-lua",metastring:'title="file.get_line"',children:'local data = file.get_line("/var/mobile/1.txt", 1)\nif data then\n  data = string.strip_utf8_bom(data) -- Remove possible UTF8-BOM\n  sys.alert("The content of the first line in `/var/mobile/1.txt` is " .. data)\nelse\n  sys.alert("`/var/mobile/1.txt` is not a file")\nend\n'})}),"\n",(0,s.jsxs)(i.h3,{id:"-set-the-content-of-a-specific-line-in-a-text-file-fileset_line",children:["\ud83d\udd24 Set the Content of a Specific Line in a Text File (",(0,s.jsx)(i.strong,{children:"file.set_line"}),")"]}),"\n",(0,s.jsx)(i.h4,{id:"declaration-8",children:"Declaration"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-lua",children:"operation_success = file.set_line(file_path, line_number, content_to_write)\n"})}),"\n",(0,s.jsx)(i.h4,{id:"parameters-and-return-values-8",children:"Parameters and Return Values"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["file_path ",(0,s.jsx)(i.em,{children:"string"})]}),"\n",(0,s.jsxs)(i.li,{children:["line_number","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.em,{children:"integer"}),", pass a positive integer to specify the line number, ",(0,s.jsx)(i.code,{children:"0"})," means the last line + 1, negative numbers refer to lines from the end"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["content_to_write ",(0,s.jsx)(i.em,{children:"string"})]}),"\n",(0,s.jsxs)(i.li,{children:["operation_success ",(0,s.jsx)(i.em,{children:"boolean"})]}),"\n"]}),"\n",(0,s.jsx)(i.h4,{id:"description-3",children:"Description"}),"\n",(0,s.jsxs)(i.p,{children:["Sets the content of a specific line in a text file. If the number of lines is insufficient, empty lines will be added. If the file does not exist, it will be created. If the parent directory of the specified path does not exist, it will return ",(0,s.jsx)(i.code,{children:"false"}),"."]}),"\n",(0,s.jsx)(i.h4,{id:"example-8",children:"Example"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-lua",metastring:'title="file.set_line"',children:'local success = file.set_line("/var/mobile/1.txt", 3, "Hahaha")\nif success then\n  sys.alert("Operation successful")\nelse\n  sys.alert("Operation failed")\nend\n'})}),"\n",(0,s.jsxs)(i.h3,{id:"-insert-content-before-a-specific-line-in-a-text-file-fileinsert_line",children:["\ud83d\udd24 Insert Content Before a Specific Line in a Text File (",(0,s.jsx)(i.strong,{children:"file.insert_line"}),")"]}),"\n",(0,s.jsx)(i.h4,{id:"declaration-9",children:"Declaration"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-lua",children:"operation_success = file.insert_line(file_path, line_number, content_to_insert)\n"})}),"\n",(0,s.jsx)(i.h4,{id:"parameters-and-return-values-9",children:"Parameters and Return Values"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["file_path ",(0,s.jsx)(i.em,{children:"string"})]}),"\n",(0,s.jsxs)(i.li,{children:["line_number","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.em,{children:"integer"}),", pass a positive integer to specify the line number, ",(0,s.jsx)(i.code,{children:"0"})," means the last line + 1, negative numbers refer to lines from the end"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["content_to_insert ",(0,s.jsx)(i.em,{children:"string"})]}),"\n",(0,s.jsxs)(i.li,{children:["operation_success ",(0,s.jsx)(i.em,{children:"boolean"})]}),"\n"]}),"\n",(0,s.jsx)(i.h4,{id:"description-4",children:"Description"}),"\n",(0,s.jsxs)(i.p,{children:["Inserts content before a specific line in a text file. If the number of lines is insufficient, empty lines will be added. If the file does not exist, it will be created. If the parent directory of the specified path does not exist, it will return ",(0,s.jsx)(i.code,{children:"false"}),"."]}),"\n",(0,s.jsx)(i.h4,{id:"example-9",children:"Example"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-lua",metastring:'title="file.insert_line"',children:'local success = file.insert_line("/var/mobile/1.txt", 2, "Regardless of fortune or misfortune")\nif success then\n  sys.alert("Operation successful")\nelse\n  sys.alert("Operation failed")\nend\n'})}),"\n",(0,s.jsxs)(i.h3,{id:"-remove-a-specific-line-from-a-text-file-fileremove_line",children:["\ud83d\udd24 Remove a Specific Line from a Text File (",(0,s.jsx)(i.strong,{children:"file.remove_line"}),")"]}),"\n",(0,s.jsx)(i.h4,{id:"declaration-10",children:"Declaration"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-lua",children:"operation_success, removed_line_content = file.remove_line(file_path, line_number)\n"})}),"\n",(0,s.jsx)(i.h4,{id:"parameters-and-return-values-10",children:"Parameters and Return Values"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["file_path ",(0,s.jsx)(i.em,{children:"string"})]}),"\n",(0,s.jsxs)(i.li,{children:["line_number","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.em,{children:"integer"}),", pass a positive integer to specify the line number, ",(0,s.jsx)(i.code,{children:"0"})," means the last line + 1, negative numbers refer to lines from the end"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["operation_success ",(0,s.jsx)(i.em,{children:"boolean"})]}),"\n",(0,s.jsxs)(i.li,{children:["removed_line_content","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.em,{children:"string"}),", returns ",(0,s.jsx)(i.code,{children:"nil"})," if the operation fails"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.h4,{id:"description-5",children:"Description"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["Line numbers start from ",(0,s.jsx)(i.code,{children:"1"}),". If the line number is out of range or the file does not exist, it returns ",(0,s.jsx)(i.code,{children:"nil"}),"."]}),"\n",(0,s.jsx)(i.li,{children:"If there is content after the removed line, subsequent lines will move up."}),"\n"]}),"\n",(0,s.jsx)(i.h4,{id:"example-10",children:"Example"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-lua",metastring:'title="file.remove_line"',children:'local success, line = file.remove_line("/var/mobile/1.txt", 3)\nif success then\n  sys.alert("Operation successful, the content of the removed line is: " .. line)\nelse\n  sys.alert("Operation failed")\nend\n'})}),"\n",(0,s.jsxs)(i.h3,{id:"-get-all-lines-of-a-text-file-fileget_lines",children:["\ud83d\udd24 Get All Lines of a Text File (",(0,s.jsx)(i.strong,{children:"file.get_lines"}),")"]}),"\n",(0,s.jsx)(i.h4,{id:"declaration-11",children:"Declaration"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-lua",children:"line_array = file.get_lines(file_path)\n"})}),"\n",(0,s.jsx)(i.h4,{id:"parameters-and-return-values-11",children:"Parameters and Return Values"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["file_path ",(0,s.jsx)(i.em,{children:"string"})]}),"\n",(0,s.jsxs)(i.li,{children:["line_array","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.em,{children:"array of strings"}),", returns ",(0,s.jsx)(i.code,{children:"nil"})," if the file does not exist"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.h4,{id:"description-6",children:"Description"}),"\n",(0,s.jsxs)(i.p,{children:["Gets all lines of a text file. An empty file returns ",(0,s.jsx)(i.code,{children:'{ [1] = "" }'}),", a non-existent file returns ",(0,s.jsx)(i.code,{children:"nil"}),"."]}),"\n",(0,s.jsx)(i.h4,{id:"example-11",children:"Example"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-lua",metastring:'title="file.get_lines"',children:'local lines = file.get_lines("/var/mobile/1.txt")\nif lines then\n  lines[1] = string.strip_utf8_bom(lines[1])  -- Remove possible UTF8-BOM\n  if #lines[1] > 0 then\n    sys.alert("The content of the first line is " .. lines[1])\n  else\n    sys.alert("The file is empty")\n  end\nelse\n  sys.alert("Operation failed")\nend\n'})}),"\n",(0,s.jsxs)(i.h3,{id:"-overwrite-a-file-with-an-array-of-strings-line-by-line-fileset_lines",children:["\ud83d\udd24 Overwrite a File with an Array of Strings Line by Line (",(0,s.jsx)(i.strong,{children:"file.set_lines"}),")"]}),"\n",(0,s.jsx)(i.h4,{id:"declaration-12",children:"Declaration"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-lua",children:"operation_success = file.set_lines(file_path, line_array)\n"})}),"\n",(0,s.jsx)(i.h4,{id:"parameters-and-return-values-12",children:"Parameters and Return Values"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["file_path ",(0,s.jsx)(i.em,{children:"string"})]}),"\n",(0,s.jsxs)(i.li,{children:["line_array ",(0,s.jsx)(i.em,{children:"array of strings"})]}),"\n",(0,s.jsxs)(i.li,{children:["operation_success ",(0,s.jsx)(i.em,{children:"boolean"})]}),"\n"]}),"\n",(0,s.jsx)(i.h4,{id:"description-7",children:"Description"}),"\n",(0,s.jsxs)(i.p,{children:["Overwrites a file with an array of strings line by line. If the file does not exist, it will be created. If the parent directory of the specified path does not exist, it will return ",(0,s.jsx)(i.code,{children:"false"}),"."]}),"\n",(0,s.jsx)(i.h4,{id:"example-12",children:"Example"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-lua",metastring:'title="file.set_lines"',children:'local success = file.set_lines("/var/mobile/1.txt", {\n  "Serve my country at all costs",\n  "Regardless of fortune or misfortune",\n})\nif success then\n  sys.alert("+1s")\nelse\n  sys.alert("Operation failed")\nend\n'})}),"\n",(0,s.jsxs)(i.h3,{id:"-insert-an-array-of-strings-line-by-line-before-a-specific-line-in-a-file-fileinsert_lines",children:["\ud83d\udd24 Insert an Array of Strings Line by Line Before a Specific Line in a File (",(0,s.jsx)(i.strong,{children:"file.insert_lines"}),")"]}),"\n",(0,s.jsx)(i.h4,{id:"declaration-13",children:"Declaration"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-lua",children:"operation_success = file.insert_lines(file_path, line_number, line_array)\n"})}),"\n",(0,s.jsx)(i.h4,{id:"parameters-and-return-values-13",children:"Parameters and Return Values"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["file_path ",(0,s.jsx)(i.em,{children:"string"})]}),"\n",(0,s.jsxs)(i.li,{children:["line_number","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.em,{children:"integer"}),", pass a positive integer to specify the line number, ",(0,s.jsx)(i.code,{children:"0"})," means the last line + 1, negative numbers refer to lines from the end"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["line_array ",(0,s.jsx)(i.em,{children:"array of strings"})]}),"\n",(0,s.jsxs)(i.li,{children:["operation_success ",(0,s.jsx)(i.em,{children:"boolean"})]}),"\n"]}),"\n",(0,s.jsx)(i.h4,{id:"description-8",children:"Description"}),"\n",(0,s.jsxs)(i.p,{children:["Inserts an array of strings line by line before a specific line in a file. If the file does not exist, it will be created. If the parent directory of the specified path does not exist, it will return ",(0,s.jsx)(i.code,{children:"false"}),"."]}),"\n",(0,s.jsx)(i.h4,{id:"example-13",children:"Example"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-lua",metastring:'title="file.insert_lines"',children:'local success = file.insert_lines("/var/mobile/1.txt", 0, { -- Append the following two lines to the end of the file\n  "I will do whatever it takes to serve my country even at the cost of my own life,",\n  "regardless of fortune or misfortune to myself.",\n})\nif success then\n  sys.alert("+1s")\nelse\n  sys.alert("Operation failed")\nend\n'})})]})}function h(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>t,x:()=>a});var l=n(6540);const s={},r=l.createContext(s);function t(e){const i=l.useContext(r);return l.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),l.createElement(r.Provider,{value:i},e.children)}}}]);