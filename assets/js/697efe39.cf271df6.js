"use strict";(self.webpackChunkxxtouch_lite=self.webpackChunkxxtouch_lite||[]).push([[4371],{2595:(e,l,t)=>{t.r(l),t.d(l,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"lua-manual/plist","title":"Property List Module","description":"Property List Module - plist","source":"@site/docs/lua-manual/plist.md","sourceDirName":"lua-manual","slug":"/lua-manual/plist","permalink":"/docs/lua-manual/plist","draft":false,"unlisted":false,"editUrl":"https://github.com/OwnGoalStudio/XXTouchElite/tree/main/docs/lua-manual/plist.md","tags":[],"version":"current","sidebarPosition":13,"frontMatter":{"sidebar_position":13},"sidebar":"luaManualSidebar","previous":{"title":"JSON Module","permalink":"/docs/lua-manual/json"},"next":{"title":"Process Dictionary Module","permalink":"/docs/lua-manual/proc"}}');var i=t(4848),a=t(8453);const r={sidebar_position:13},s="Property List Module",d={},o=[{value:"Property List Module - plist",id:"property-list-module---plist",level:2},{value:"Read Property List File (<strong>plist.read</strong>)",id:"read-property-list-file-plistread",level:3},{value:"Declaration",id:"declaration",level:4},{value:"Parameters and Return Values",id:"parameters-and-return-values",level:4},{value:"Example",id:"example",level:4},{value:"Write Property List File (<strong>plist.write</strong>)",id:"write-property-list-file-plistwrite",level:3},{value:"Declaration",id:"declaration-1",level:4},{value:"Parameters and Return Values",id:"parameters-and-return-values-1",level:4},{value:"Example",id:"example-1",level:4},{value:"Load Property List Data as Lua Table (<strong>plist.load</strong>)",id:"load-property-list-data-as-lua-table-plistload",level:3},{value:"Declaration",id:"declaration-2",level:4},{value:"Parameters and Return Values",id:"parameters-and-return-values-2",level:4},{value:"Example 1",id:"example-1-1",level:4},{value:"Example 2",id:"example-2",level:4},{value:"Dump Lua Table to Property List Data (<strong>plist.dump</strong>)",id:"dump-lua-table-to-property-list-data-plistdump",level:3},{value:"Declaration",id:"declaration-3",level:4},{value:"Parameters and Return Values",id:"parameters-and-return-values-3",level:4},{value:"Example",id:"example-3",level:4}];function c(e){const l={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(l.header,{children:(0,i.jsx)(l.h1,{id:"property-list-module",children:"Property List Module"})}),"\n",(0,i.jsx)(l.h2,{id:"property-list-module---plist",children:"Property List Module - plist"}),"\n",(0,i.jsxs)(l.h3,{id:"read-property-list-file-plistread",children:["Read Property List File (",(0,i.jsx)(l.strong,{children:"plist.read"}),")"]}),"\n",(0,i.jsx)(l.h4,{id:"declaration",children:"Declaration"}),"\n",(0,i.jsx)(l.pre,{children:(0,i.jsx)(l.code,{className:"language-lua",children:"tab = plist.read(file_path)\n"})}),"\n",(0,i.jsx)(l.h4,{id:"parameters-and-return-values",children:"Parameters and Return Values"}),"\n",(0,i.jsxs)(l.ul,{children:["\n",(0,i.jsxs)(l.li,{children:["file_path ",(0,i.jsx)(l.em,{children:"string"})]}),"\n",(0,i.jsxs)(l.li,{children:["tab","\n",(0,i.jsxs)(l.ul,{children:["\n",(0,i.jsxs)(l.li,{children:[(0,i.jsx)(l.em,{children:"associative table"}),", returns ",(0,i.jsx)(l.code,{children:"nil"})," if reading fails"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(l.h4,{id:"example",children:"Example"}),"\n",(0,i.jsx)(l.pre,{children:(0,i.jsx)(l.code,{className:"language-lua",metastring:'title="plist.read"',children:"local plfilename = \"/var/mobile/Library/Caches/com.apple.mobile.installation.plist\"  -- Set the property list file path\nlocal tmp2 = plist.read(plfilename)                 -- Read the property list file content and return a Lua table\nsys.alert(tmp2['Metadata']['ProductBuildVersion'])  -- Display the value of the ProductBuildVersion key\n"})}),"\n",(0,i.jsxs)(l.h3,{id:"write-property-list-file-plistwrite",children:["Write Property List File (",(0,i.jsx)(l.strong,{children:"plist.write"}),")"]}),"\n",(0,i.jsx)(l.h4,{id:"declaration-1",children:"Declaration"}),"\n",(0,i.jsx)(l.pre,{children:(0,i.jsx)(l.code,{className:"language-lua",children:"success = plist.write(file_path, tab)\n"})}),"\n",(0,i.jsx)(l.h4,{id:"parameters-and-return-values-1",children:"Parameters and Return Values"}),"\n",(0,i.jsxs)(l.ul,{children:["\n",(0,i.jsxs)(l.li,{children:["file_path ",(0,i.jsx)(l.em,{children:"string"})]}),"\n",(0,i.jsxs)(l.li,{children:["tab ",(0,i.jsx)(l.em,{children:"associative table"})]}),"\n",(0,i.jsxs)(l.li,{children:["success ",(0,i.jsx)(l.em,{children:"boolean"})]}),"\n"]}),"\n",(0,i.jsx)(l.admonition,{title:"Limitations",type:"caution",children:(0,i.jsxs)(l.ul,{children:["\n",(0,i.jsxs)(l.li,{children:["Be careful not to pass in tables with ",(0,i.jsx)(l.strong,{children:"reference loops"}),", as this will cause the script to hang or crash."]}),"\n",(0,i.jsx)(l.li,{children:"Not all Lua values can be serialized into property list data, such as userdata, functions, or tables containing userdata or functions. These values will be ignored during serialization."}),"\n",(0,i.jsxs)(l.li,{children:["Modifying property list files will change their owner to ",(0,i.jsx)(l.code,{children:"root"}),". If you need to modify the property list of a user app, you must correct its ownership."]}),"\n"]})}),"\n",(0,i.jsx)(l.h4,{id:"example-1",children:"Example"}),"\n",(0,i.jsx)(l.pre,{children:(0,i.jsx)(l.code,{className:"language-lua",children:'local plfilename = "/var/mobile/Library/Caches/com.apple.mobile.installation.plist"  -- Set the property list file path\nlocal tmp2 = plist.read(plfilename)                -- Read the property list file content and return a Lua table\ntmp2["Metadata"]["ProductBuildVersion"] = "havonz" -- Modify the ProductBuildVersion key value in the table to "havonz"\nplist.write(plfilename, tmp2)                      -- Write the modified table back to the property list file\n--\nlocal posix = require("posix")                     -- Import the posix module\nposix.chmod(plfilename, "rw-r--r--")               -- Correct the file permissions of the property list file to 0644\n--\nlocal unistd = require("posix.unistd")             -- Import the posix.unistd module\nunistd.chown(plfilename, 501, 501)                 -- Correct the owner of the property list file to 501\n'})}),"\n",(0,i.jsxs)(l.h3,{id:"load-property-list-data-as-lua-table-plistload",children:["Load Property List Data as Lua Table (",(0,i.jsx)(l.strong,{children:"plist.load"}),")"]}),"\n",(0,i.jsx)(l.h4,{id:"declaration-2",children:"Declaration"}),"\n",(0,i.jsx)(l.pre,{children:(0,i.jsx)(l.code,{className:"language-lua",children:"tab = plist.load(property_list_data)\n"})}),"\n",(0,i.jsx)(l.h4,{id:"parameters-and-return-values-2",children:"Parameters and Return Values"}),"\n",(0,i.jsxs)(l.ul,{children:["\n",(0,i.jsxs)(l.li,{children:["property_list_data ",(0,i.jsx)(l.em,{children:"string"})]}),"\n",(0,i.jsxs)(l.li,{children:["tab","\n",(0,i.jsxs)(l.ul,{children:["\n",(0,i.jsxs)(l.li,{children:[(0,i.jsx)(l.em,{children:"associative table"}),", returns ",(0,i.jsx)(l.code,{children:"nil"})," if loading fails"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(l.h4,{id:"example-1-1",children:"Example 1"}),"\n",(0,i.jsx)(l.pre,{children:(0,i.jsx)(l.code,{className:"language-lua",metastring:'title="plist.load"',children:"local jtmp = plist.load([[\n{\n  arr = (\n    46,\n    99,\n    7,\n  );\n  dict = {\n    a = 55;\n    b = 65;\n    c = 9;\n  };\n}\n]])\nsys.alert(jtmp.arr[1])  -- Output 46\nsys.alert(jtmp.dict.c)  -- Output 9\n"})}),"\n",(0,i.jsx)(l.h4,{id:"example-2",children:"Example 2"}),"\n",(0,i.jsx)(l.pre,{children:(0,i.jsx)(l.code,{className:"language-lua",metastring:'title="plist.load"',children:'local xtmp = plist.load([[\n<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">\n<plist version="1.0">\n<dict>\n  <key>arr</key>\n  <array>\n    <string>46</string>\n    <string>99</string>\n    <string>7</string>\n  </array>\n  <key>dict</key>\n  <dict>\n    <key>a</key>\n    <string>55</string>\n    <key>b</key>\n    <string>65</string>\n    <key>c</key>\n    <string>9</string>\n  </dict>\n</dict>\n</plist>\n]])\nsys.alert(xtmp.arr[1])  -- Output 46\nsys.alert(xtmp.dict.c)  -- Output 9\n'})}),"\n",(0,i.jsxs)(l.h3,{id:"dump-lua-table-to-property-list-data-plistdump",children:["Dump Lua Table to Property List Data (",(0,i.jsx)(l.strong,{children:"plist.dump"}),")"]}),"\n",(0,i.jsx)(l.h4,{id:"declaration-3",children:"Declaration"}),"\n",(0,i.jsx)(l.pre,{children:(0,i.jsx)(l.code,{className:"language-lua",children:"property_list_data = plist.dump(tab[, format])\n"})}),"\n",(0,i.jsx)(l.h4,{id:"parameters-and-return-values-3",children:"Parameters and Return Values"}),"\n",(0,i.jsxs)(l.ul,{children:["\n",(0,i.jsxs)(l.li,{children:["tab ",(0,i.jsx)(l.em,{children:"associative table"})]}),"\n",(0,i.jsxs)(l.li,{children:["format","\n",(0,i.jsxs)(l.ul,{children:["\n",(0,i.jsxs)(l.li,{children:[(0,i.jsx)(l.em,{children:"string"}),", ",(0,i.jsx)(l.em,{children:"optional"}),", can only be ",(0,i.jsx)(l.code,{children:"binary"})," or ",(0,i.jsx)(l.code,{children:"XML"}),", defaults to ",(0,i.jsx)(l.code,{children:"XML"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(l.li,{children:["property_list_data","\n",(0,i.jsxs)(l.ul,{children:["\n",(0,i.jsxs)(l.li,{children:[(0,i.jsx)(l.em,{children:"string"}),", returns ",(0,i.jsx)(l.code,{children:"nil"})," if conversion fails"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(l.admonition,{title:"Limitations",type:"caution",children:(0,i.jsxs)(l.ul,{children:["\n",(0,i.jsxs)(l.li,{children:["Be careful not to pass in tables with ",(0,i.jsx)(l.strong,{children:"reference loops"}),", as this will cause the script to hang or crash."]}),"\n",(0,i.jsx)(l.li,{children:"Not all Lua values can be serialized into property list data, such as userdata, functions, or tables containing userdata or functions. These values will be ignored during serialization."}),"\n"]})}),"\n",(0,i.jsx)(l.h4,{id:"example-3",children:"Example"}),"\n",(0,i.jsx)(l.pre,{children:(0,i.jsx)(l.code,{className:"language-lua",metastring:'title="plist.dump"',children:'local tab = {\n  arr = {\n    46,\n    99,\n    7,\n  };\n  dict = {\n    a = 55;\n    b = 65;\n    c = 9;\n  };\n}\n--\nlocal xplist = plist.dump(tab)\nsys.alert(xplist)  -- Output property list data in XML format\n--\nlocal bplist = plist.dump(tab, "binary")\nsys.alert(bplist)  -- Binary format property list data, will appear garbled when printed\n'})})]})}function p(e={}){const{wrapper:l}={...(0,a.R)(),...e.components};return l?(0,i.jsx)(l,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,l,t)=>{t.d(l,{R:()=>r,x:()=>s});var n=t(6540);const i={},a=n.createContext(i);function r(e){const l=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(l):{...l,...e}}),[l,e])}function s(e){let l;return l=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(a.Provider,{value:l},e.children)}}}]);