"use strict";(self.webpackChunkxxtouch_lite=self.webpackChunkxxtouch_lite||[]).push([[2946],{8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var s=t(6540);const i={},o=s.createContext(i);function a(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(o.Provider,{value:n},e.children)}},9992:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"appendix/daemon-mode","title":"Daemon Mode","description":"Daemon mode ensures that scripts can restart automatically when the device returns to a normal state after being interrupted by external factors (e.g., service crashes, power outages). Exceptions include the following situations:","source":"@site/docs/appendix/daemon-mode.md","sourceDirName":"appendix","slug":"/appendix/daemon-mode","permalink":"/docs/appendix/daemon-mode","draft":false,"unlisted":false,"editUrl":"https://github.com/OwnGoalStudio/XXTouchElite/tree/main/docs/appendix/daemon-mode.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"appendixSidebar","previous":{"title":"Process Scheduling","permalink":"/docs/appendix/process-scheduling"},"next":{"title":"Startup Script","permalink":"/docs/appendix/startup-script"}}');var i=t(4848),o=t(8453);const a={sidebar_position:6},r="Daemon Mode",d={},l=[{value:"Enable and Disable Daemon Mode",id:"enable-and-disable-daemon-mode",level:2},{value:"Enable via App",id:"enable-via-app",level:3},{value:"Enable via OpenAPI",id:"enable-via-openapi",level:3},{value:"Notes",id:"notes",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"daemon-mode",children:"Daemon Mode"})}),"\n",(0,i.jsx)(n.p,{children:"Daemon mode ensures that scripts can restart automatically when the device returns to a normal state after being interrupted by external factors (e.g., service crashes, power outages). Exceptions include the following situations:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The device is out of power and not recharged."}),"\n",(0,i.jsx)(n.li,{children:"The device cannot boot."}),"\n",(0,i.jsx)(n.li,{children:"The device loses its jailbroken state after rebooting."}),"\n",(0,i.jsx)(n.li,{children:"The device is in safe mode."}),"\n",(0,i.jsx)(n.li,{children:"The device has a lock screen password and is rebooted."}),"\n",(0,i.jsx)(n.li,{children:"The user manually terminates the script."}),"\n",(0,i.jsx)(n.li,{children:"The script process terminates due to runtime errors."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"enable-and-disable-daemon-mode",children:"Enable and Disable Daemon Mode"}),"\n",(0,i.jsx)(n.h3,{id:"enable-via-app",children:"Enable via App"}),"\n",(0,i.jsxs)(n.p,{children:["Open ",(0,i.jsx)(n.strong,{children:"X.X.T.E. Application"})," \u2192 ",(0,i.jsx)(n.strong,{children:"More"})," \u2192 ",(0,i.jsx)(n.strong,{children:"User Defaults"})," \u2192 ",(0,i.jsx)(n.strong,{children:"Daemon Config"})," \u2192 ",(0,i.jsx)(n.strong,{children:"Daemon Mode"})," to enable or disable daemon mode."]}),"\n",(0,i.jsx)(n.h3,{id:"enable-via-openapi",children:"Enable via OpenAPI"}),"\n",(0,i.jsxs)(n.p,{children:["Use the OpenAPI interface ",(0,i.jsx)(n.a,{href:"https://elite.82flex.com/api-283425315",children:(0,i.jsx)(n.strong,{children:"Set User Preferences"})})," with the ",(0,i.jsx)(n.code,{children:"script_on_daemon"})," field to enable or disable daemon mode."]}),"\n",(0,i.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,i.jsx)(n.p,{children:"Daemon mode starts before the boot-up script. Therefore, after a device restarts due to a failure, you can add the following code at the beginning of the script to ensure that the screen is unlocked when the script starts:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'while (device.is_screen_locked()) do\n  device.unlock_screen()\n  sys.msleep(1000)\nend\nsys.toast("Screen unlocked, script starting")\n-- You can start the script below\n-- \u2026\n'})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);